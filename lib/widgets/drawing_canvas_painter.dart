import 'package:flutter/material.dart';
import 'dart:ui' as ui; // Alias for dart:ui, often used for Path, Canvas, Paint

/// A CustomPainter that draws a given SVG outline path onto the canvas.
///
/// This painter is designed to display a static outline. For interactive drawing
/// (like user strokes), you would typically manage a list of paths.
class DrawingCanvasPainter extends CustomPainter {
  /// The SVG outline as a ui.Picture (for complex SVGs) or ui.Path (for simple lines).
  /// For this example, we're passing a ui.Picture generated by flutter_svg.
  final ui.Picture? svgPictureOutline;

  /// An optional background image to draw before the outline.
  /// This will be the loaded drawing state from Hive.
  final ui.Image? backgroundImage;

  // You can also add other properties like stroke color, stroke width if drawing paths
  // final Color outlineColor;
  // final double outlineStrokeWidth;

  DrawingCanvasPainter({
    this.svgPictureOutline,
    this.backgroundImage,
    // this.outlineColor = Colors.black,
    // this.outlineStrokeWidth = 2.0,
  });

  @override
  void paint(Canvas canvas, Size size) {
    // 1. Draw the background image first if it exists.
    // This will be the loaded saved drawing or a clear canvas.
    if (backgroundImage != null) {
      // Ensure the image covers the entire canvas.
      // Use drawImageRect for scaling if necessary.
      final Rect src = Rect.fromLTWH(0, 0, backgroundImage!.width.toDouble(), backgroundImage!.height.toDouble());
      final Rect dst = Rect.fromLTWH(0, 0, size.width, size.height);
      canvas.drawImageRect(backgroundImage!, src, dst, Paint());
    } else {
      // If no background image, draw a white background for the canvas.
      canvas.drawRect(Rect.fromLTWH(0, 0, size.width, size.height), Paint()..color = Colors.white);
    }

    // 2. Draw the SVG outline on top.
    if (svgPictureOutline != null) {
      // Define a Rect where the SVG should be drawn.
      // This will scale the SVG to fit the canvas size.
      final Rect svgBounds = Rect.fromLTWH(0, 0, size.width, size.height);

      // Save the canvas state before applying transformations for SVG.
      canvas.save();

      // For complex SVGs, you might need to calculate scale and translation
      // based on svgPictureOutline.cullRect and desired canvas size.
      // flutter_svg's `paint` method on `DrawableRoot` handles this.
      // Since we already rendered to a ui.Picture with `flutter_svg`,
      // we just draw the picture.
      canvas.drawPicture(svgPictureOutline!);
      canvas.restore();
    }
  }

  @override
  bool shouldRepaint(covariant DrawingCanvasPainter oldDelegate) {
    // Repaint if either the SVG outline or the background image has changed.
    return oldDelegate.svgPictureOutline != svgPictureOutline ||
           oldDelegate.backgroundImage != backgroundImage;
  }
}